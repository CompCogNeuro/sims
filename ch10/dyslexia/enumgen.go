// Code generated by "core generate -add-types"; DO NOT EDIT.

package main

import (
	"cogentcore.org/core/enums"
)

var _LesionTypesValues = []LesionTypes{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

// LesionTypesN is the highest valid value for type LesionTypes, plus one.
const LesionTypesN LesionTypes = 10

var _LesionTypesValueMap = map[string]LesionTypes{`NoLesion`: 0, `SemanticsFull`: 1, `DirectFull`: 2, `OShidden`: 3, `SPhidden`: 4, `OPhidden`: 5, `OShidDirectFull`: 6, `SPhidDirectFull`: 7, `OPhidSemanticsFull`: 8, `AllPartial`: 9}

var _LesionTypesDescMap = map[LesionTypes]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``, 6: ``, 7: ``, 8: ``, 9: ``}

var _LesionTypesMap = map[LesionTypes]string{0: `NoLesion`, 1: `SemanticsFull`, 2: `DirectFull`, 3: `OShidden`, 4: `SPhidden`, 5: `OPhidden`, 6: `OShidDirectFull`, 7: `SPhidDirectFull`, 8: `OPhidSemanticsFull`, 9: `AllPartial`}

// String returns the string representation of this LesionTypes value.
func (i LesionTypes) String() string { return enums.String(i, _LesionTypesMap) }

// SetString sets the LesionTypes value from its string representation,
// and returns an error if the string is invalid.
func (i *LesionTypes) SetString(s string) error {
	return enums.SetString(i, s, _LesionTypesValueMap, "LesionTypes")
}

// Int64 returns the LesionTypes value as an int64.
func (i LesionTypes) Int64() int64 { return int64(i) }

// SetInt64 sets the LesionTypes value from an int64.
func (i *LesionTypes) SetInt64(in int64) { *i = LesionTypes(in) }

// Desc returns the description of the LesionTypes value.
func (i LesionTypes) Desc() string { return enums.Desc(i, _LesionTypesDescMap) }

// LesionTypesValues returns all possible values for the type LesionTypes.
func LesionTypesValues() []LesionTypes { return _LesionTypesValues }

// Values returns all possible values for the type LesionTypes.
func (i LesionTypes) Values() []enums.Enum { return enums.Values(_LesionTypesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i LesionTypes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *LesionTypes) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "LesionTypes")
}
