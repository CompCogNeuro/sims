// Code generated by "stringer -type=LesionTypes"; DO NOT EDIT.

package main

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NoLesion-0]
	_ = x[SemanticsFull-1]
	_ = x[DirectFull-2]
	_ = x[OShidden-3]
	_ = x[SPhidden-4]
	_ = x[OPhidden-5]
	_ = x[OShidDirectFull-6]
	_ = x[SPhidDirectFull-7]
	_ = x[OPhidSemanticsFull-8]
	_ = x[AllPartial-9]
	_ = x[LesionTypesN-10]
}

const _LesionTypes_name = "NoLesionSemanticsFullDirectFullOShiddenSPhiddenOPhiddenOShidDirectFullSPhidDirectFullOPhidSemanticsFullAllPartialLesionTypesN"

var _LesionTypes_index = [...]uint8{0, 8, 21, 31, 39, 47, 55, 70, 85, 103, 113, 125}

func (i LesionTypes) String() string {
	if i < 0 || i >= LesionTypes(len(_LesionTypes_index)-1) {
		return "LesionTypes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LesionTypes_name[_LesionTypes_index[i]:_LesionTypes_index[i+1]]
}

func (i *LesionTypes) FromString(s string) error {
	for j := 0; j < len(_LesionTypes_index)-1; j++ {
		if s == _LesionTypes_name[_LesionTypes_index[j]:_LesionTypes_index[j+1]] {
			*i = LesionTypes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: LesionTypes")
}
