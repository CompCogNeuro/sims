// Code generated by "core generate -add-types"; DO NOT EDIT.

package main

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "main.Sim", IDName: "sim", Doc: "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).", Methods: []types.Method{{Name: "SetInput", Doc: "SetInput sets whether the input to the network comes in bottom-up\n(Input layer) or top-down (Higher-level category layers)", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Args: []string{"topDown"}}, {Name: "SetPatterns", Doc: "SetPatterns selects which patterns to present: full or partial faces", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Args: []string{"partial"}}}, Fields: []types.Field{{Name: "Net", Doc: "the network -- click to view / edit parameters for layers, paths, etc"}, {Name: "Params", Doc: "network parameter management"}, {Name: "NCycles", Doc: "total number of cycles to run"}, {Name: "Loops", Doc: "contains looper control loops for running sim"}, {Name: "Stats", Doc: "contains computed statistic values"}, {Name: "Logs", Doc: "Contains all the logs and information about the logs.'"}, {Name: "Patterns", Doc: "the patterns to use"}, {Name: "PartialPatterns", Doc: "the partial patterns to use"}, {Name: "Envs", Doc: "Environments"}, {Name: "Context", Doc: "leabra timing parameters and state"}, {Name: "ViewUpdate", Doc: "netview update parameters"}, {Name: "GUI", Doc: "manages all the gui elements"}, {Name: "RandSeeds", Doc: "a list of random seeds to use for each run"}}})
