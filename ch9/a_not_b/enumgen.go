// Code generated by "core generate -add-types"; DO NOT EDIT.

package main

import (
	"cogentcore.org/core/enums"
)

var _DelaysValues = []Delays{0, 1, 2}

// DelaysN is the highest valid value for type Delays, plus one.
const DelaysN Delays = 3

var _DelaysValueMap = map[string]Delays{`Delay3`: 0, `Delay5`: 1, `Delay1`: 2}

var _DelaysDescMap = map[Delays]string{0: ``, 1: ``, 2: ``}

var _DelaysMap = map[Delays]string{0: `Delay3`, 1: `Delay5`, 2: `Delay1`}

// String returns the string representation of this Delays value.
func (i Delays) String() string { return enums.String(i, _DelaysMap) }

// SetString sets the Delays value from its string representation,
// and returns an error if the string is invalid.
func (i *Delays) SetString(s string) error { return enums.SetString(i, s, _DelaysValueMap, "Delays") }

// Int64 returns the Delays value as an int64.
func (i Delays) Int64() int64 { return int64(i) }

// SetInt64 sets the Delays value from an int64.
func (i *Delays) SetInt64(in int64) { *i = Delays(in) }

// Desc returns the description of the Delays value.
func (i Delays) Desc() string { return enums.Desc(i, _DelaysDescMap) }

// DelaysValues returns all possible values for the type Delays.
func DelaysValues() []Delays { return _DelaysValues }

// Values returns all possible values for the type Delays.
func (i Delays) Values() []enums.Enum { return enums.Values(_DelaysValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Delays) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Delays) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Delays") }
