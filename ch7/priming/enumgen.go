// Code generated by "core generate -add-types"; DO NOT EDIT.

package main

import (
	"cogentcore.org/core/enums"
)

var _EnvTypesValues = []EnvTypes{0, 1, 2, 3, 4, 5}

// EnvTypesN is the highest valid value for type EnvTypes, plus one.
//
//gosl:start
const EnvTypesN EnvTypes = 6

//gosl:end

var _EnvTypesValueMap = map[string]EnvTypes{`TrainB`: 0, `TrainA`: 1, `TrainAltAB`: 2, `TestA`: 3, `TestB`: 4, `TestAltAB`: 5}

var _EnvTypesDescMap = map[EnvTypes]string{0: `TrainB sets train env to OnlyB patterns, for wt priming training`, 1: `TrainA sets train env to OnlyA patterns`, 2: `TrainAltAB sets train to AltAB patterns`, 3: `TestA sets testing to OnlyA patterns, for wt priming testing`, 4: `TestB sets testing to OnlyB patterns`, 5: `TestAltAB sets testing to AltAB patterns, for act priming`}

var _EnvTypesMap = map[EnvTypes]string{0: `TrainB`, 1: `TrainA`, 2: `TrainAltAB`, 3: `TestA`, 4: `TestB`, 5: `TestAltAB`}

// String returns the string representation of this EnvTypes value.
func (i EnvTypes) String() string { return enums.String(i, _EnvTypesMap) }

// SetString sets the EnvTypes value from its string representation,
// and returns an error if the string is invalid.
func (i *EnvTypes) SetString(s string) error {
	return enums.SetString(i, s, _EnvTypesValueMap, "EnvTypes")
}

// Int64 returns the EnvTypes value as an int64.
func (i EnvTypes) Int64() int64 { return int64(i) }

// SetInt64 sets the EnvTypes value from an int64.
func (i *EnvTypes) SetInt64(in int64) { *i = EnvTypes(in) }

// Desc returns the description of the EnvTypes value.
func (i EnvTypes) Desc() string { return enums.Desc(i, _EnvTypesDescMap) }

// EnvTypesValues returns all possible values for the type EnvTypes.
func EnvTypesValues() []EnvTypes { return _EnvTypesValues }

// Values returns all possible values for the type EnvTypes.
func (i EnvTypes) Values() []enums.Enum { return enums.Values(_EnvTypesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i EnvTypes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *EnvTypes) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "EnvTypes") }
