// Code generated by "core generate -add-types"; DO NOT EDIT.

package main

import (
	"cogentcore.org/core/enums"
)

var _LearnTypeValues = []LearnType{0, 1, 2}

// LearnTypeN is the highest valid value for type LearnType, plus one.
const LearnTypeN LearnType = 3

var _LearnTypeValueMap = map[string]LearnType{`Hebbian`: 0, `ErrorDriven`: 1, `ErrorHebbIn`: 2}

var _LearnTypeDescMap = map[LearnType]string{0: ``, 1: ``, 2: ``}

var _LearnTypeMap = map[LearnType]string{0: `Hebbian`, 1: `ErrorDriven`, 2: `ErrorHebbIn`}

// String returns the string representation of this LearnType value.
func (i LearnType) String() string { return enums.String(i, _LearnTypeMap) }

// SetString sets the LearnType value from its string representation,
// and returns an error if the string is invalid.
func (i *LearnType) SetString(s string) error {
	return enums.SetString(i, s, _LearnTypeValueMap, "LearnType")
}

// Int64 returns the LearnType value as an int64.
func (i LearnType) Int64() int64 { return int64(i) }

// SetInt64 sets the LearnType value from an int64.
func (i *LearnType) SetInt64(in int64) { *i = LearnType(in) }

// Desc returns the description of the LearnType value.
func (i LearnType) Desc() string { return enums.Desc(i, _LearnTypeDescMap) }

// LearnTypeValues returns all possible values for the type LearnType.
func LearnTypeValues() []LearnType { return _LearnTypeValues }

// Values returns all possible values for the type LearnType.
func (i LearnType) Values() []enums.Enum { return enums.Values(_LearnTypeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i LearnType) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *LearnType) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "LearnType")
}
