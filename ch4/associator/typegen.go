// Code generated by "core generate -add-types -add-funcs"; DO NOT EDIT.

package associator

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch4/associator.Patterns", IDName: "patterns", Doc: "Patterns is the type of training patterns"})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch4/associator.LearnType", IDName: "learn-type", Doc: "LearnType is the type of learning to use"})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch4/associator.Modes", IDName: "modes", Doc: "Modes are the looping modes (Stacks) for running and statistics."})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch4/associator.Levels", IDName: "levels", Doc: "Levels are the looping levels for running and statistics."})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch4/associator.StatsPhase", IDName: "stats-phase", Doc: "StatsPhase is the phase of stats processing for given mode, level.\nAccumulated values are reset at Start, added each Step."})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch4/associator.Sim", IDName: "sim", Doc: "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).", Fields: []types.Field{{Name: "Learn", Doc: "select which type of learning to use"}, {Name: "Patterns", Doc: "select which type of patterns to use"}, {Name: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args"}, {Name: "Net", Doc: "Net is the network: click to view / edit parameters for layers, paths, etc."}, {Name: "Params", Doc: "Params manages network parameter setting."}, {Name: "Loops", Doc: "Loops are the control loops for running the sim, in different Modes\nacross stacks of Levels."}, {Name: "Envs", Doc: "Envs provides mode-string based storage of environments."}, {Name: "TrainUpdate", Doc: "TrainUpdate has Train mode netview update parameters."}, {Name: "TestUpdate", Doc: "TestUpdate has Test mode netview update parameters."}, {Name: "Root", Doc: "Root is the root tensorfs directory, where all stats and other misc sim data goes."}, {Name: "Stats", Doc: "Stats has the stats directory within Root."}, {Name: "Current", Doc: "Current has the current stats values within Stats."}, {Name: "StatFuncs", Doc: "StatFuncs are statistics functions called at given mode and level,\nto perform all stats computations. phase = Start does init at start of given level,\nand all intialization / configuration (called during Init too)."}, {Name: "GUI", Doc: "GUI manages all the GUI elements"}, {Name: "RandSeeds", Doc: "RandSeeds is a list of random seeds to use for each run."}}})

var _ = types.AddFunc(&types.Func{Name: "github.com/CompCogNeuro/sims/v2/ch4/associator.RunSim", Doc: "RunSim runs the simulation as a standalone app\nwith given configuration.", Args: []string{"cfg"}, Returns: []string{"error"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/CompCogNeuro/sims/v2/ch4/associator.EmbedSim", Doc: "EmbedSim runs the simulation with default configuration\nembedded within given body element.", Args: []string{"b"}, Returns: []string{"Sim"}})
