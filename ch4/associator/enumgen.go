// Code generated by "core generate -add-types -add-funcs"; DO NOT EDIT.

package associator

import (
	"cogentcore.org/core/enums"
)

var _PatternsValues = []Patterns{0, 1, 2}

// PatternsN is the highest valid value for type Patterns, plus one.
const PatternsN Patterns = 3

var _PatternsValueMap = map[string]Patterns{`Easy`: 0, `Hard`: 1, `Impossible`: 2}

var _PatternsDescMap = map[Patterns]string{0: `Easy patterns can be learned by Hebbian learning`, 1: `Hard patterns can only be learned with error-driven learning`, 2: `Impossible patterns require error-driven + a hidden layer`}

var _PatternsMap = map[Patterns]string{0: `Easy`, 1: `Hard`, 2: `Impossible`}

// String returns the string representation of this Patterns value.
func (i Patterns) String() string { return enums.String(i, _PatternsMap) }

// SetString sets the Patterns value from its string representation,
// and returns an error if the string is invalid.
func (i *Patterns) SetString(s string) error {
	return enums.SetString(i, s, _PatternsValueMap, "Patterns")
}

// Int64 returns the Patterns value as an int64.
func (i Patterns) Int64() int64 { return int64(i) }

// SetInt64 sets the Patterns value from an int64.
func (i *Patterns) SetInt64(in int64) { *i = Patterns(in) }

// Desc returns the description of the Patterns value.
func (i Patterns) Desc() string { return enums.Desc(i, _PatternsDescMap) }

// PatternsValues returns all possible values for the type Patterns.
func PatternsValues() []Patterns { return _PatternsValues }

// Values returns all possible values for the type Patterns.
func (i Patterns) Values() []enums.Enum { return enums.Values(_PatternsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Patterns) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Patterns) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Patterns") }

var _LearnTypeValues = []LearnType{0, 1}

// LearnTypeN is the highest valid value for type LearnType, plus one.
const LearnTypeN LearnType = 2

var _LearnTypeValueMap = map[string]LearnType{`Hebbian`: 0, `ErrorDriven`: 1}

var _LearnTypeDescMap = map[LearnType]string{0: ``, 1: ``}

var _LearnTypeMap = map[LearnType]string{0: `Hebbian`, 1: `ErrorDriven`}

// String returns the string representation of this LearnType value.
func (i LearnType) String() string { return enums.String(i, _LearnTypeMap) }

// SetString sets the LearnType value from its string representation,
// and returns an error if the string is invalid.
func (i *LearnType) SetString(s string) error {
	return enums.SetString(i, s, _LearnTypeValueMap, "LearnType")
}

// Int64 returns the LearnType value as an int64.
func (i LearnType) Int64() int64 { return int64(i) }

// SetInt64 sets the LearnType value from an int64.
func (i *LearnType) SetInt64(in int64) { *i = LearnType(in) }

// Desc returns the description of the LearnType value.
func (i LearnType) Desc() string { return enums.Desc(i, _LearnTypeDescMap) }

// LearnTypeValues returns all possible values for the type LearnType.
func LearnTypeValues() []LearnType { return _LearnTypeValues }

// Values returns all possible values for the type LearnType.
func (i LearnType) Values() []enums.Enum { return enums.Values(_LearnTypeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i LearnType) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *LearnType) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "LearnType")
}

var _ModesValues = []Modes{0, 1}

// ModesN is the highest valid value for type Modes, plus one.
const ModesN Modes = 2

var _ModesValueMap = map[string]Modes{`Train`: 0, `Test`: 1}

var _ModesDescMap = map[Modes]string{0: ``, 1: ``}

var _ModesMap = map[Modes]string{0: `Train`, 1: `Test`}

// String returns the string representation of this Modes value.
func (i Modes) String() string { return enums.String(i, _ModesMap) }

// SetString sets the Modes value from its string representation,
// and returns an error if the string is invalid.
func (i *Modes) SetString(s string) error { return enums.SetString(i, s, _ModesValueMap, "Modes") }

// Int64 returns the Modes value as an int64.
func (i Modes) Int64() int64 { return int64(i) }

// SetInt64 sets the Modes value from an int64.
func (i *Modes) SetInt64(in int64) { *i = Modes(in) }

// Desc returns the description of the Modes value.
func (i Modes) Desc() string { return enums.Desc(i, _ModesDescMap) }

// ModesValues returns all possible values for the type Modes.
func ModesValues() []Modes { return _ModesValues }

// Values returns all possible values for the type Modes.
func (i Modes) Values() []enums.Enum { return enums.Values(_ModesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Modes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Modes) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Modes") }

var _LevelsValues = []Levels{0, 1, 2, 3, 4}

// LevelsN is the highest valid value for type Levels, plus one.
const LevelsN Levels = 5

var _LevelsValueMap = map[string]Levels{`Cycle`: 0, `Trial`: 1, `Epoch`: 2, `Run`: 3, `Expt`: 4}

var _LevelsDescMap = map[Levels]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``}

var _LevelsMap = map[Levels]string{0: `Cycle`, 1: `Trial`, 2: `Epoch`, 3: `Run`, 4: `Expt`}

// String returns the string representation of this Levels value.
func (i Levels) String() string { return enums.String(i, _LevelsMap) }

// SetString sets the Levels value from its string representation,
// and returns an error if the string is invalid.
func (i *Levels) SetString(s string) error { return enums.SetString(i, s, _LevelsValueMap, "Levels") }

// Int64 returns the Levels value as an int64.
func (i Levels) Int64() int64 { return int64(i) }

// SetInt64 sets the Levels value from an int64.
func (i *Levels) SetInt64(in int64) { *i = Levels(in) }

// Desc returns the description of the Levels value.
func (i Levels) Desc() string { return enums.Desc(i, _LevelsDescMap) }

// LevelsValues returns all possible values for the type Levels.
func LevelsValues() []Levels { return _LevelsValues }

// Values returns all possible values for the type Levels.
func (i Levels) Values() []enums.Enum { return enums.Values(_LevelsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Levels) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Levels) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Levels") }

var _StatsPhaseValues = []StatsPhase{0, 1}

// StatsPhaseN is the highest valid value for type StatsPhase, plus one.
const StatsPhaseN StatsPhase = 2

var _StatsPhaseValueMap = map[string]StatsPhase{`Start`: 0, `Step`: 1}

var _StatsPhaseDescMap = map[StatsPhase]string{0: ``, 1: ``}

var _StatsPhaseMap = map[StatsPhase]string{0: `Start`, 1: `Step`}

// String returns the string representation of this StatsPhase value.
func (i StatsPhase) String() string { return enums.String(i, _StatsPhaseMap) }

// SetString sets the StatsPhase value from its string representation,
// and returns an error if the string is invalid.
func (i *StatsPhase) SetString(s string) error {
	return enums.SetString(i, s, _StatsPhaseValueMap, "StatsPhase")
}

// Int64 returns the StatsPhase value as an int64.
func (i StatsPhase) Int64() int64 { return int64(i) }

// SetInt64 sets the StatsPhase value from an int64.
func (i *StatsPhase) SetInt64(in int64) { *i = StatsPhase(in) }

// Desc returns the description of the StatsPhase value.
func (i StatsPhase) Desc() string { return enums.Desc(i, _StatsPhaseDescMap) }

// StatsPhaseValues returns all possible values for the type StatsPhase.
func StatsPhaseValues() []StatsPhase { return _StatsPhaseValues }

// Values returns all possible values for the type StatsPhase.
func (i StatsPhase) Values() []enums.Enum { return enums.Values(_StatsPhaseValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i StatsPhase) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *StatsPhase) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "StatsPhase")
}
