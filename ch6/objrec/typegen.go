// Code generated by "core generate -add-types -add-funcs -gosl"; DO NOT EDIT.

package objrec

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.EnvConfig", IDName: "env-config", Doc: "EnvConfig has config params for environment\nnote: only adding fields for key Env params that matter for both Network and Env\nother params are set via the Env map data mechanism.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Env", Doc: "env parameters -- can set any field/subfield on Env struct, using standard TOML formatting"}, {Name: "NOutPer", Doc: "number of units per localist output unit"}}})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.ParamConfig", IDName: "param-config", Doc: "ParamConfig has config parameters related to sim params.", Fields: []types.Field{{Name: "Script", Doc: "Script is an interpreted script that is run to set parameters in Layer and Path\nsheets, by default using the \"Script\" set name."}, {Name: "Sheet", Doc: "Sheet is the extra params sheet name(s) to use (space separated\nif multiple). Must be valid name as listed in compiled-in params\nor loaded params."}, {Name: "Tag", Doc: "Tag is an extra tag to add to file names and logs saved from this run."}, {Name: "Note", Doc: "Note is additional info to describe the run params etc,\nlike a git commit message for the run."}, {Name: "SaveAll", Doc: "SaveAll will save a snapshot of all current param and config settings\nin a directory named params_<datestamp> (or _good if Good is true),\nthen quit. Useful for comparing to later changes and seeing multiple\nviews of current params."}, {Name: "Good", Doc: "Good is for SaveAll, save to params_good for a known good params state.\nThis can be done prior to making a new release after all tests are passing.\nAdd results to git to provide a full diff record of all params over level."}, {Name: "V1V4Path", Doc: "pathway from V1 to V4 which is tiled 4x4 skip 2 with topo scale values."}}})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.RunConfig", IDName: "run-config", Doc: "RunConfig has config parameters related to running the sim.", Fields: []types.Field{{Name: "GPU", Doc: "GPU uses the GPU for computation, generally faster than CPU even for\nsmall models if NData ~16."}, {Name: "GPUDevice", Doc: "GPUDevice selects the gpu device to use."}, {Name: "NData", Doc: "NData is the number of data-parallel items to process in parallel per trial.\nIs significantly faster for both CPU and GPU.  Results in an effective\nmini-batch of learning."}, {Name: "SlowInterval", Doc: "SlowInterval is the interval between slow adaptive processes.\nThis generally needs to be longer than the default of 100 in larger models."}, {Name: "AdaptGiInterval", Doc: "AdaptGiInterval is the interval between adapting inhibition steps."}, {Name: "NThreads", Doc: "NThreads is the number of parallel threads for CPU computation;\n0 = use default."}, {Name: "Run", Doc: "Run is the _starting_ run number, which determines the random seed.\nRuns counts up from there. Can do all runs in parallel by launching\nseparate jobs with each starting Run, Runs = 1."}, {Name: "Runs", Doc: "Runs is the total number of runs to do when running Train, starting from Run."}, {Name: "Epochs", Doc: "Epochs is the total number of epochs per run."}, {Name: "Trials", Doc: "Trials is the total number of trials per epoch.\nShould be an even multiple of NData."}, {Name: "Cycles", Doc: "Cycles is the total number of cycles per trial: at least 200."}, {Name: "PlusCycles", Doc: "PlusCycles is the total number of plus-phase cycles per trial. For Cycles=300, use 100."}, {Name: "NZero", Doc: "NZero is how many perfect, zero-error epochs before stopping a Run."}, {Name: "TestInterval", Doc: "TestInterval is how often (in epochs) to run through all the test patterns,\nin terms of training epochs. Can use 0 or -1 for no testing."}, {Name: "PCAInterval", Doc: "PCAInterval is how often (in epochs) to compute PCA on hidden\nrepresentations to measure variance."}, {Name: "StartWeights", Doc: "StartWeights is the name of weights file to load at start of first run."}}})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.LogConfig", IDName: "log-config", Doc: "LogConfig has config parameters related to logging data.", Fields: []types.Field{{Name: "SaveWeights", Doc: "SaveWeights will save final weights after each run."}, {Name: "Train", Doc: "Train has the list of Train mode levels to save log files for."}, {Name: "Test", Doc: "Test has the list of Test mode levels to save log files for."}}})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.Config", IDName: "config", Doc: "Config has the overall Sim configuration options.", Fields: []types.Field{{Name: "Name", Doc: "Name is the short name of the sim."}, {Name: "Title", Doc: "Title is the longer title of the sim."}, {Name: "URL", Doc: "URL is a link to the online README or other documentation for this sim."}, {Name: "Doc", Doc: "Doc is brief documentation of the sim."}, {Name: "Includes", Doc: "Includes has a list of additional config files to include.\nAfter configuration, it contains list of include files added."}, {Name: "GUI", Doc: "GUI means open the GUI. Otherwise it runs automatically and quits,\nsaving results to log files."}, {Name: "Debug", Doc: "Debug reports debugging information."}, {Name: "Env", Doc: "environment configuration options"}, {Name: "Params", Doc: "Params has parameter related configuration options."}, {Name: "Run", Doc: "Run has sim running related configuration options."}, {Name: "Log", Doc: "Log has data logging related configuration options."}}})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.LEDEnv", IDName: "led-env", Doc: "LEDEnv generates images of old-school \"LED\" style \"letters\" composed of a set of horizontal\nand vertical elements.  All possible such combinations of 3 out of 6 line segments are created.\nRenders using SVG.", Fields: []types.Field{{Name: "Name", Doc: "name of this environment"}, {Name: "Draw", Doc: "draws LEDs onto image"}, {Name: "Vis", Doc: "visual processing params"}, {Name: "NOutPer", Doc: "number of output units per LED item -- spiking benefits from replication"}, {Name: "MinLED", Doc: "minimum LED number to draw (0-19)"}, {Name: "MaxLED", Doc: "maximum LED number to draw (0-19)"}, {Name: "CurLED", Doc: "current LED number that was drawn"}, {Name: "PrvLED", Doc: "previous LED number that was drawn"}, {Name: "XFormRand", Doc: "random transform parameters"}, {Name: "XForm", Doc: "current -- prev transforms"}, {Name: "Trial", Doc: "trial is the step counter for items"}, {Name: "OrigImg", Doc: "original image prior to random transforms"}, {Name: "Output", Doc: "CurLED one-hot output tensor"}}})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.LEDraw", IDName: "le-draw", Doc: "LEDraw renders old-school \"LED\" style \"letters\" composed of a set of horizontal\nand vertical elements.  All possible such combinations of 3 out of 6 line segments are created.\nRenders using SVG.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Width", Doc: "line width of LEDraw as percent of display size"}, {Name: "Size", Doc: "size of overall LED as proportion of overall image size"}, {Name: "LineColor", Doc: "color name for drawing lines"}, {Name: "BgColor", Doc: "color name for background"}, {Name: "ImgSize", Doc: "size of image to render"}, {Name: "Paint", Doc: "painting context object"}}})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.LEDSegs", IDName: "led-segs", Doc: "LEDSegs are the led segments"})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.Modes", IDName: "modes", Doc: "Modes are the looping modes (Stacks) for running and statistics."})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.Levels", IDName: "levels", Doc: "Levels are the looping levels for running and statistics."})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.StatsPhase", IDName: "stats-phase", Doc: "StatsPhase is the phase of stats processing for given mode, level.\nAccumulated values are reset at Start, added each Step."})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.Sim", IDName: "sim", Doc: "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).", Fields: []types.Field{{Name: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args"}, {Name: "Net", Doc: "Net is the network: click to view / edit parameters for layers, paths, etc."}, {Name: "Params", Doc: "Params manages network parameter setting."}, {Name: "Loops", Doc: "Loops are the control loops for running the sim, in different Modes\nacross stacks of Levels."}, {Name: "Envs", Doc: "Envs provides mode-string based storage of environments."}, {Name: "TrainUpdate", Doc: "TrainUpdate has Train mode netview update parameters."}, {Name: "TestUpdate", Doc: "TestUpdate has Test mode netview update parameters."}, {Name: "Root", Doc: "Root is the root tensorfs directory, where all stats and other misc sim data goes."}, {Name: "Stats", Doc: "Stats has the stats directory within Root."}, {Name: "Current", Doc: "Current has the current stats values within Stats."}, {Name: "StatFuncs", Doc: "StatFuncs are statistics functions called at given mode and level,\nto perform all stats computations. phase = Start does init at start of given level,\nand all intialization / configuration (called during Init too)."}, {Name: "GUI", Doc: "GUI manages all the GUI elements"}, {Name: "RandSeeds", Doc: "RandSeeds is a list of random seeds to use for each run."}}})

var _ = types.AddType(&types.Type{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.Vis", IDName: "vis", Doc: "Vis encapsulates specific visual processing pipeline for V1 filtering", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "V1sGabor", Doc: "V1 simple gabor filter parameters"}, {Name: "V1sGeom", Doc: "geometry of input, output for V1 simple-cell processing"}, {Name: "V1sNeighInhib", Doc: "neighborhood inhibition for V1s -- each unit gets inhibition from same feature in nearest orthogonal neighbors -- reduces redundancy of feature code"}, {Name: "V1sKWTA", Doc: "kwta parameters for V1s"}, {Name: "ImgSize", Doc: "target image size to use -- images will be rescaled to this size"}, {Name: "V1sGaborTsr", Doc: "V1 simple gabor filter tensor"}, {Name: "ImgTsr", Doc: "input image as tensor"}, {Name: "Img", Doc: "current input image"}, {Name: "V1sTsr", Doc: "V1 simple gabor filter output tensor"}, {Name: "V1sExtGiTsr", Doc: "V1 simple extra Gi from neighbor inhibition tensor"}, {Name: "V1sKwtaTsr", Doc: "V1 simple gabor filter output, kwta output tensor"}, {Name: "V1sPoolTsr", Doc: "V1 simple gabor filter output, max-pooled 2x2 of V1sKwta tensor"}, {Name: "V1sUnPoolTsr", Doc: "V1 simple gabor filter output, un-max-pooled 2x2 of V1sPool tensor"}, {Name: "V1sAngOnlyTsr", Doc: "V1 simple gabor filter output, angle-only features tensor"}, {Name: "V1sAngPoolTsr", Doc: "V1 simple gabor filter output, max-pooled 2x2 of AngOnly tensor"}, {Name: "V1cLenSumTsr", Doc: "V1 complex length sum filter output tensor"}, {Name: "V1cEndStopTsr", Doc: "V1 complex end stop filter output tensor"}, {Name: "V1AllTsr", Doc: "Combined V1 output tensor with V1s simple as first two rows, then length sum, then end stops = 5 rows total"}, {Name: "V1sInhibs", Doc: "inhibition values for V1s KWTA"}}})

var _ = types.AddFunc(&types.Func{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.NewConfig", Returns: []string{"Config"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.RunSim", Doc: "RunSim runs the simulation as a standalone app\nwith given configuration.", Args: []string{"cfg"}, Returns: []string{"error"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/CompCogNeuro/sims/v2/ch6/objrec.EmbedSim", Doc: "EmbedSim runs the simulation with default configuration\nembedded within given body element.", Args: []string{"b"}, Returns: []string{"Sim"}})
